### This is a file with a number of API test calls

### Request 1: invalid ticket (must have items)
POST http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

{
    "cust_name": "Ted",
    "ticket_items" : [],
    "active": "true",
    "promo_code": "FCI9F566KQ"
}

### Request 2 create a ticket
POST http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

{
    "cust_name": "Ted",
    "ticket_items" : [
        {
            "item_name" : "Burger",
            "price" : 21.99,
            "mods" : "No cheese"
        },
        {
            "item_name" : "Pizza",
            "price" : 24.99,
            "mods" : "Add Pepperoni"
        }
    ],
    "active" : "true",
    "promo_code": "FCI9F566KQ"
}

### Request 2.1: create many tickets
POST http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

{
    "cust_name": "Lauren",
    "ticket_items" : [
        {
            "item_name" : "Rosemary Chicken",
            "price" : 21.99,
            "mods" : "Extra Broccoli"
        }
    ],
    "active" : "true",
    "promo_code": "FCI9F566KQ"
}

### 
POST http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

{
    "cust_name" : "Geraldine",
    "ticket_items" : [
        {
            "item_name" :"Seed and Worm Plate",
            "price" : 2.99,
            "mods" : ""
        }
    ],
    "active": "true"
}

### 
POST http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

{
    "cust_name" : "Rosie",
    "ticket_items" : [
        {
            "item_name" :"Kibbles",
            "price" : 4.99,
            "mods" : "Extra Chicken"
        }
    ],
    "active": "true",
    "promo_code": ""
}

### 
POST http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

{
    "cust_name" : "Big Table",
    "ticket_items" : [
        {
            "item_name" :"Kibbles",
            "price" : 4.99,
            "mods" : "Extra Chicken"
        },
        {
            "item_name" :"Seed and Worm Plate",
            "price" : 2.99,
            "mods" : ""
        },
        {
            "item_name" : "Rosemary Chicken",
            "price" : 21.99,
            "mods" : "Extra Broccoli"
        },
        {
            "item_name" : "Burger",
            "price" : 21.99,
            "mods" : "No cheese"
        },
        {
            "item_name" : "Pizza",
            "price" : 24.99,
            "mods" : "Add Pepperoni"
        }
    ],
    "active": "true",
    "promo_code" : ""
}

###
POST http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

{
    "cust_name": "Code User",
    "ticket_items" : [
        {
            "item_name" : "Rosemary Chicken",
            "price" : 21.99,
            "mods" : "Extra Broccoli"
        },
        {
            "item_name" : "Burger",
            "price" : 21.99,
            "mods" : "No cheese"
        }
    ],
    "active": "true",
    "promo_code": "FCI9F566KQ"
}


### Request 3: Create an item
POST http://localhost:3000/api/items HTTP/1.1
content-type: application/json

{
    "item_name" : "Rosemary Chicken",
    "price" : 26.99,
    "sold_out" : false
}

### Request 4: Create another item
POST http://localhost:3000/api/items HTTP/1.1
content-type: application/json

{
    "item_name" : "Beef Short Ribs",
    "price" : 31.99,
    "sold_out" : false
}

### Request 4.1 (item is sold out)
POST http://localhost:3000/api/items HTTP/1.1
content-type: application/json

{
    "item_name" : "Chicken Picatta",
    "price" : 29.99,
    "sold_out": true
}

### Request 5: get all tickets regardless of active status
GET http://localhost:3000/api/tickets HTTP/1.1
content-type: application/json

### Request 6: get active tickets

GET http://localhost:3000/api/active_tickets HTTP/1.1
content-type: application/json

### Request 7: toggle active status
PUT http://localhost:3000/api/tickets/toggle_active/64b0845a93533e625fa1ed69 HTTP/1.1
content-type: application/json

### Request 8: THIS TYPE OF REQUEST IS NOT YET SUPPORTED update items in a ticket
PUT http://localhost:3000/api/tickets/64ae3ab2a10f0d6834e18731 HTTP/1.1
content-type: application/json
{
    "items" : [
        "64aee83c8a79af4d1b4caf4e",
        "64aee8628a79af4d1b4caf50"
    ]
}

### Request 9: get all items (regardless of sold out status)
GET http://localhost:3000/api/items HTTP/1.1
content-type: application/json

### Request 9.1: get all available items
GET http://localhost:3000/api/available_items HTTP/1.1
content-type: application/json

### Request 10: toggle sold out status given an item id
PUT http://localhost:3000/items/toggle_sold_out/64b0861993533e625fa1ed8f HTTP/1.1
content-type: application/json

### Request 11: Test microservice
GET http://localhost:3000/api/tickets?code=FCI9F566KQ HTTP/1.1
content-type: application/json

### Request 12: Test delete Item
DELETE http://localhost:3000/api/items/64d93e0bfd6ea3a44d3a3154 HTTP/1.1
content-type: application/json

### Request 13: Test delete ticket
DELETE http://localhost:3000/api/tickets/64dc1a81ee1bb98783746408 HTTP/1.1
content-type:application/json

### Request 14, test deployed api
GET https://tickets-api-yyd8.onrender.com/api/tickets HTTP/1.1
content-type:application/json